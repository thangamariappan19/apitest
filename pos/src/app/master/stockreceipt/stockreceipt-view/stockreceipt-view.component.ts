import { Component, OnInit } from '@angular/core';
import { ApiService } from 'src/app/api.service';
import { CommonService } from 'src/app/common.service';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { ConfirmService } from 'src/app/confirm/confirm.service';
import { Router, ActivatedRoute } from '@angular/router';
import { MStockreceiptdetailsMaster } from 'src/app/models/m-stockreceiptdetails-master';
import { MUserDetails } from 'src/app/models/m-user-details';
import { MSkuMasterTypes } from 'src/app/models/m-sku-master-types';
import { MDocumentNumbering } from 'src/app/models/m-document-numbering';
import { MStockreceiptheaderMaster } from 'src/app/models/m-stockreceiptheader-master';
import { MTransactionLog } from 'src/app/models/m-transaction-log';
import { MBinLogDetails } from 'src/app/models/m-bin-log-details';
import { PDFDocumentProxy } from "ng2-pdf-viewer";
import pdfMake from "pdfmake/build/pdfmake";
import pdfFonts from "src/assets/vfs_fonts.js";
import { fonts } from "src/assets/config/pdfFonts";
import { formatDate } from '@angular/common';
import { styles, defaultStyle } from "src/assets/config/customStyles";
pdfMake.vfs = pdfFonts.pdfMake.vfs;
pdfMake.fonts = fonts;

@Component({
  selector: 'app-stockreceipt-view',
  templateUrl: './stockreceipt-view.component.html',
  styleUrls: ['./stockreceipt-view.component.css']
})
export class StockreceiptViewComponent implements OnInit {

  pdfSrc; // this sample, dynamic one we will generate with the pdfmake
  pageVariable = 0;
  myForm: FormGroup;
  stockreceiptdetails:Array<any>;
  stockreceipt:MStockreceiptheaderMaster;
  stockreceiptlist: Array<MStockreceiptdetailsMaster>;
  stockreceiptlistBin: Array<MBinLogDetails>;
  transactionLogList:Array<MTransactionLog>;
  user_details: MUserDetails = null;
  userid:number;
  storeid:number;
  storename:string;
  storecode:string;
  countryid:number;
  countrycode:string;
  documenttypeid:number;
  businessdate:any;
  id: any;
  requestid:number;
  withOutBaseDoc:boolean;
  fromWareHouseID:number;
  fromWarehouseCode:string;
  fromwarehousename:string;
  type:boolean;
  receivedType:string;
  boolUpdate:boolean=false;
  binEnabled:any;
  skuList: Array<MSkuMasterTypes>;
  rcvdquantity:number = 0;
  scanValue:any;
  binList:any;
  binID:any;
  autoGeneratedCode:any;
  subLevelCode:any;
  totalPages = 0;
  pdf: PDFDocumentProxy;
  pdfData;
  documentDefinition: object;
  generatedPDF: any;
  DocumentDate: any;
  DocumentNo: any;
  Size:any;
  binShow1: boolean;
  binShow2: boolean;
  editField: number;
  //wareHouseList: Array<any>;
  warehousename: any;
  warehouseCode: any;
    StoreName:any;
    totalrcvdqty:any;

  constructor(
    private api: ApiService,
    private common: CommonService,
    private fb: FormBuilder,
    private confirm: ConfirmService,
    public router: Router,
    private activatedRoute: ActivatedRoute
  ) {
    this.createForm();
  }
  createForm() {
    this.myForm = this.fb.group({
      barCode: [''],
      barCode1: [''],
      fromstore: [''],
      documentDate: [''],
      documentNo:[''],
      status:[''],
      towarehousestore:[''],
      quantity:[],
      totalrcvdqty:[],
      rem:[''],
      stockreqdocno:[''],
      date:[''],
      totaltransferqty:[''],
      group:[''],
      bin:['']
    });
    this.getStaticValues();
    this.stockreceiptdetails=new Array<any>();
    this.stockreceiptlist = new Array<MStockreceiptdetailsMaster>();
    this.stockreceiptlistBin= new Array<MBinLogDetails>();
    this.transactionLogList=new Array<MTransactionLog>();
    this.stockreceipt= new MStockreceiptheaderMaster();
    this.skuList=new Array<MSkuMasterTypes>();
    this.clear_controls();
  }
  clear_controls() {
      }
  ngOnInit(): void {
    this.id = this.activatedRoute.snapshot.paramMap.get('id');
    this.getStoreDetails();
    this.getBinDetails();
    this.getStockReceiptDetails();
  }
  getStoreDetails() {
    this.common.showSpinner();
    this.api.getAPI("store?ID=" + this.storeid)
      .subscribe((data) => {
        setTimeout(() => {
          if (data != null && data.statusCode != null && data.statusCode == 1)
          {
            this.binEnabled = data.storeMasterData.enableBin;
            if (this.binEnabled == 1)
            {
              document.getElementById("sr_nobin").setAttribute("hidden","true");
            }
            else
            {
              document.getElementById("sr_withbin").setAttribute("hidden","true");
            }
           }
           else if(data!=null && data.statusCode!=null && data.statusCode==4)
           {
            document.getElementById("sr_withbin").setAttribute("hidden","true");
           }
          else
           {
            let msg: string = data != null
              && data.displayMessage != null
              && data.displayMessage != "" ? data.displayMessage : "Failed to retrieve Data.";
            this.common.showMessage('warn', msg);
           }
          this.common.hideSpinner();
        }, this.common.time_out_delay);
      });
  }

  getBinDetails(){
    this.common.showSpinner();
    this.api.getAPI("BinLevelDetails?ID=" + this.storeid)
      .subscribe((data) => {
        setTimeout(() => {
          if (data != null && data.statusCode != null && data.statusCode == 1) {

            this.binList = data.binSubLevelList;

            let filter = this.binList.filter(x => x.defaultReceivingBin == true)

            if(filter.length>0)
            {
              this.binID = filter[0].id;
              this.autoGeneratedCode = filter[0].autoGeneratedCode;
              this.subLevelCode = filter[0].subLevelCode;
              this.myForm.controls['bin'].setValue(this.autoGeneratedCode);
            }

          } else {
            let msg: string = data != null
              && data.displayMessage != null
              && data.displayMessage != "" ? data.displayMessage : "Failed to retrieve Data.";
            this.common.showMessage('warn', msg);
          }
          this.common.hideSpinner();
        }, this.common.time_out_delay);
      });
  }

  changeValue(i: number, property: string, event: any)
  {
    this.editField = event.target.textContent;
  }
  updateList(i: number, property: string, event: any)
  {
    const editField = parseFloat(event.target.textContent);
    var y: number = editField;
    this.stockreceiptlist[i][property] = editField;
  }
  void_item(item) {
    const idx = this.stockreceiptlistBin.indexOf(item, 0);
    if (idx > -1) {
      this.stockreceiptlistBin.splice(idx, 1);
    }
  }
  getSKUData() {

    this.scanValue = this.myForm.get('barCode1').value;

    if(this.scanValue != "")
    {
    for(let i=0;i<this.stockreceiptlist.length;i++)
    {
      this.rcvdquantity = this.stockreceiptlist[i].receivedQuantity;

      if(this.stockreceiptlist[i].barCode == this.scanValue || this.stockreceiptlist[i].skuCode ==  this.scanValue)
        {
          if(this.stockreceiptlist[i].transferQuantity > this.rcvdquantity)
          {
            let tempdata: MBinLogDetails = {
              id:0,
              barCode: this.stockreceiptlist[i].barCode,
              sKUCode: this.stockreceiptlist[i].skuCode,
              rFID :"",
              storeID: this.storeid,
              storeCode : this.storecode,
              binID:this.binID,
              binCode:this.autoGeneratedCode,
              binSubLevelCode:this.subLevelCode,
              quantity: 1,
              createBy:this.user_details.id,
              updateBy:this.user_details.id,
              status:"Open",
              remarks:"StockReceipt",
              active:true
            }
            this.stockreceiptlistBin.push(tempdata);
            this.stockreceiptlist[i].receivedQuantity = this.stockreceiptlist[i].receivedQuantity + 1;
            this.myForm.get('barCode1').setValue('');
            break;
          }
          else{
            this.common.showMessage('warn', 'Received QTY cannot be greater than Transfer QTY!');
            this.myForm.get('barCode1').setValue('');
          }
        }
         else{
           //this.common.showMessage('warn', 'Barcode/SKUCode not matching!');
           this.myForm.get('barCode1').setValue('');
         }
    }
  }
  else{
    this.common.showMessage('warn', 'Please enter Barcode/SKUCode!');
  }
}

afterLoadComplete(pdf: PDFDocumentProxy): void {
  this.pdf = pdf;
  this.totalPages = pdf.numPages;
}

onPrint(event: any): void {
  this.print();
  // this.getData();
  // this.printService.printHTML(this.printerName, printData);
}
print(): void {
  // Remove previously added iframes
  const prevFrames = document.querySelectorAll('iframe[name="pdf-frame"]');
  if (prevFrames.length) {
    prevFrames.forEach((item) => item.remove());
  }
  // just like download , we are using the blob
  const blob = new Blob([this.pdfSrc], { type: "application/pdf" });
  const objectURl = URL.createObjectURL(blob);

  // create iframe element in dom
  const frame = document.createElement("iframe");
  frame.style.display = "none"; // hiding the iframe
  frame.src = objectURl; // setting the source for that iframe
  // appending this iframe to body
  document.body.appendChild(frame);
  frame.name = "pdf-frame";
  frame.focus();
  frame.contentWindow.print();
  // in edge or IE we are using different methods to print
  // if (this.isIE() || this.isEdge()) {
  //   frame.contentWindow.document.execCommand("print", false, null);
  // } else {
  //   // all other browsers will use this method
  //   frame.contentWindow.print();
  // }
}


// to know the browser is IE or not
isIE(): boolean {
  return navigator.userAgent.lastIndexOf("MSIE") !== -1;
}

// to know the browser is Edge or not
// isEdge(): boolean {
//   return !this.isIE() && !!window.StyleMedia;
// }
getData(): void {
  var data =
  {

    // type: 'html',
    // format: 'plain',
    // data: repHTML

  }
  if (data) {
    this.pdfData = data;
    // let tempname = this.wareHouseList.filter(x=>x.id == this.WarehouseName);
    // this.WarehouseName = this.WarehouseName + '-' + tempname[0].warehouseName;
    this.generatePDF();
  }
}
generatePDF(): void {
//console.log(this.stockreceiptlist);
  this.documentDefinition = {
    info: {
      // title: this.pdfData.title,

      creationDate: new Date(),
    },
    content: [
      {
        text: 'DETAILED STOCK RECEIPT',
        style: 'header',
        alignment: 'center'
      },
      {
      columns: [


        [

          {
            text: 'Showroom: ' + '\t' + this.user_details.storeCode+'-'+ this.user_details.storeName,
            bold: true,
            fontSize: 8,
          },
          { text: 'Run Date:' + '\t\t' + formatDate(Date(), 'dd-MM-yyyy', 'en'), fontSize: 8, bold: true },
          //{ text: 'To Warehouse: ' + '\t\t'+ this.warehouseCode+'-'+ this.warehousename, fontSize: 8, bold: true }

        ],
        [

          {
            text: `Return Date:` + '\t\t' + formatDate(this.DocumentDate, 'dd-MM-yyyy', 'en'),
            alignment: 'right',
            fontSize: 8
          },
          {
            text: 'Return No:' + '\t\t' + this.DocumentNo,
            alignment: 'right',
            fontSize: 8

          }



        ],

      ],
    },
{
      table: {

        headerRows: 1,
        //widths: ['*', '*', '*', '*', '*' , '*'],
        widths: ['16.6%', '16.6%', '16.6%', '16.6%', '16.6%', '16.6%'],
        body: [
          ['SKUCode', 'SKUName', 'Quantity', 'Color', 'Size' , 'BarCode'],
         // ['888','hhh','hhh','uuu','uygg'],
           ...this.stockreceiptlist.map(p => ([p.skuCode, p.skuName, p.quantity, p.color, p.size,p.barCode])),


          // [{text: 'Total Discount',alignment: 'right',bold:true, colSpan: 2},{},this.totalDiscount],
         // [{ text: 'Total ', alignment: 'right', bold: true, colSpan: 3 }, {}, this.rcvdquantity],
        // [{ text: 'Remarks ', alignment: 'left', bold: true, colSpan: 2 }, {}, this.Remarks]

        ]


      }
    }
  ],
      styles: {
        sectionHeader: {
          bold: true,
          decoration: 'underline',
          fontSize: 10,
          margin: [0, 15, 0, 15]
        }
      },
      defaultStyle,

    // ],
    // {


  };
  // Generating the pdf
  this.generatedPDF = pdfMake.createPdf(this.documentDefinition);
  this.generatedPDF.getBuffer((buffer) => {
    this.pdfSrc = buffer;
  });

}
// view()
// {
//   this.getData();
// }
  getStockReceiptDetails() {
    this.common.showSpinner();
    this.api.getAPI("stockreceipt?ID=" + this.id)
      .subscribe((data) => {
        setTimeout(() => {
          if (data != null && data.statusCode != null && data.statusCode == 1) {
            this.stockreceiptdetails = data.responseDynamicData;
            this.myForm.controls['barCode'].setValue('');
            this.myForm.controls['stockreqdocno'].setValue(data.responseDynamicData.stockRequestDocumentNo);
            this.myForm.controls['date'].setValue(this.common.toYMDFormat(new Date(data.responseDynamicData.documentDate)));
            this.myForm.controls['documentNo'].setValue(data.responseDynamicData.documentNo);
            this.myForm.controls['towarehousestore'].setValue(this.storename);
            this.myForm.controls['status'].setValue(data.responseDynamicData.status);
            this.myForm.controls['rem'].setValue(data.responseDynamicData.remarks);
            this.myForm.controls['group'].setValue(data.responseDynamicData.receivedType);
            this.myForm.controls['totaltransferqty'].setValue(data.responseDynamicData.totalQuantity);
            this.DocumentDate = this.common.toYMDFormat(new Date(data.responseDynamicData.documentDate));
            this.DocumentNo  = data.responseDynamicData.documentNo;
            this.Size  = data.responseDynamicData.size;
            this.warehouseCode=data.responseDynamicData.fromWarehouseCode;
            this.warehousename=data.responseDynamicData.fromwarehousename;
            this.stockreceiptlist=data.responseDynamicData.stockReceiptDetailsList;
            this.requestid=data.responseDynamicData.stockRequestID;
            this.withOutBaseDoc=data.responseDynamicData.withOutBaseDoc;
            this.fromWareHouseID=data.responseDynamicData.fromWareHouseID;
            this.fromWarehouseCode=data.responseDynamicData.fromWarehouseCode;
            this.fromwarehousename=data.responseDynamicData.fromwarehousename;
            this.type=data.responseDynamicData.type;
            this.receivedType=data.responseDynamicData.receivedType;
            this.addtrfQTY();
            this.getData();

          } else {
            let msg: string = data != null
              && data.displayMessage != null
              && data.displayMessage != "" ? data.displayMessage : "Failed to retrieve Data.";
            this.common.showMessage('warn', msg);
          }
          this.common.hideSpinner();
        }, this.common.time_out_delay);
      });
  }
  getStaticValues()
  {
    let temp_str: string = localStorage.getItem('user_details');
    if (temp_str != null) {
      this.user_details = JSON.parse(temp_str);
      this.userid=this.user_details.id;
      this.storeid=this.user_details.storeID;
      this.storename=this.user_details.storeName;
      this.storecode=this.user_details.storeCode;
      this.countryid=this.user_details.countryID;
      this.countrycode=this.user_details.countryCode;
      this.documenttypeid=62;
      this.businessdate=this.common.toYMDFormat(new Date());
    }
  }

  addQTY()
  {
    let dis_totalamount: number = 0;
    for (let i = 0; i < this.stockreceiptlist.length; i++){
      dis_totalamount = dis_totalamount + parseInt(this.stockreceiptlist[i].receivedQuantity.toString());
    }
    this.myForm.get('totalrcvdqty').setValue(dis_totalamount);
  }
  addtrfQTY()
  {
    let dis_trframount: number = 0;
    for (let i = 0; i < this.stockreceiptlist.length; i++){
      dis_trframount = dis_trframount + parseInt(this.stockreceiptlist[i].transferQuantity.toString());
    }
    this.myForm.get('totaltransferqty').setValue(dis_trframount);
  }
  getTransactionLogList()
  {
    this.transactionLogList = new Array<MTransactionLog>();
    if(this.stockreceiptlist != null){
      for (let i = 0; i < this.stockreceiptlist.length; i++){
        let templogdata:MTransactionLog = {
          id:0,
          transactionType:"StockReceipt",
          businessDate:this.businessdate,
          actualDateTime:this.businessdate,
          documentID:0,
          styleCode:this.stockreceiptlist[i].styleCode,
          skuCode:this.stockreceiptlist[i].skuCode,
          inQty:this.stockreceiptlist[i].receivedQuantity,
          outQty: 0,
          transactionPrice:0,
          currency:0,
          exchangeRate:0,
          documentPrice:0,
          userID:this.userid,
          documentNo:this.myForm.get('documentNo').value,
          storeID:this.storeid,
          storeCode:this.storecode,
          countryID:this.countryid,
          countryCode:this.countrycode,
          }
          this.transactionLogList.push(templogdata);
      }
    }
  }
  UpdateStockReceiptDetails(){
    if (this.stockreceiptlist == null) {
      this.common.showMessage("warn", "Can not Save, Language Details are invalid.");
    }  else {
            this.common.showSpinner();
            this.getTransactionLogList();

            for (let i = 0; i < this.stockreceiptlist.length; i++){
              if(this.stockreceiptlist[i].receivedQuantity!=this.stockreceiptlist[i].transferQuantity)
              {
                this.boolUpdate=false;
                break;
              }
              else{
                this.boolUpdate=true;
              }
            }

            if(this.boolUpdate==true)
            {
            this.addQTY();
            this.stockreceipt.id=this.id;
            this.stockreceipt.stockRequestDocumentNo=this.myForm.get('stockreqdocno').value;
            this.stockreceipt.stockRequestID=this.requestid;
            this.stockreceipt.documentNo=this.myForm.get('documentNo').value;
            this.stockreceipt.documentDate=this.myForm.get('date').value;
            this.stockreceipt.totalQuantity=this.myForm.get('totaltransferqty').value;
            this.stockreceipt.totalReceivedQuantity=this.myForm.get('totalrcvdqty').value;
            this.stockreceipt.withOutBaseDoc=this.withOutBaseDoc;
            this.stockreceipt.fromWareHouseID=this.fromWareHouseID;
            this.stockreceipt.fromWarehouseCode=this.fromWarehouseCode;
            this.stockreceipt.fromwarehousename=this.fromwarehousename;
            this.stockreceipt.storeID=this.storeid;
            this.stockreceipt.storeCode=this.storecode;
            this.stockreceipt.remarks=this.myForm.get('rem').value;
            this.stockreceipt.type=this.type;
            this.stockreceipt.status="Closed";
            this.stockreceipt.stockRequestStatus="Closed";
            this.stockreceipt.createOn=this.businessdate;
            this.stockreceipt.receivedType=this.receivedType;
            this.stockreceipt.stockReceiptDetailsList=this.stockreceiptlist;
            this.stockreceipt.transactionLogList=this.transactionLogList;
            this.stockreceipt.binLogList = this.stockreceiptlistBin;

            this.api.postAPI("stockreceipt", this.stockreceipt).subscribe((data) => {
                if (data != null && data.statusCode != null && data.statusCode == 1) {
                    this.common.hideSpinner();
                    this.common.showMessage('success', data.displayMessage);
                    this.clear_controls();
                    this.router.navigate(['stockreceipt']);
                } else {
                    setTimeout(() => {
                    this.common.hideSpinner();
                    this.common.showMessage('error', 'Failed to Save.');
                }, this.common.time_out_delay);
              }
          });
      }
      else{
        setTimeout(() => {
          this.common.hideSpinner();
          this.common.showMessage('error', 'TRANSFER QTY AND RECEIVED QTY MISMATCH');
      }, this.common.time_out_delay);
     }
    }
  }
   close() {
    if(this.myForm.dirty){
      if(confirm("Are You Sure You want to Close the Form Without Saving?")) {
        this.router.navigate(['stockreceipt']);
    }
    }
    else
    {
      this.router.navigate(['stockreceipt']);
  }
    }
}
